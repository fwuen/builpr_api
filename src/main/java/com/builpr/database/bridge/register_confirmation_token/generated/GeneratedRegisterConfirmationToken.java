package com.builpr.database.bridge.register_confirmation_token.generated;

import com.builpr.database.bridge.register_confirmation_token.RegisterConfirmationToken;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.builpr.database.bridge.register_confirmation_token.RegisterConfirmationToken}-interface
 * representing entities of the {@code register_confirmation_token}-table in the
 * database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedRegisterConfirmationToken {
    
    /**
     * This Field corresponds to the {@link RegisterConfirmationToken} field
     * that can be obtained using the {@link
     * RegisterConfirmationToken#getRegisterConfirmationTokenId()} method.
     */
    IntField<RegisterConfirmationToken, Integer> REGISTER_CONFIRMATION_TOKEN_ID = IntField.create(
        Identifier.REGISTER_CONFIRMATION_TOKEN_ID,
        RegisterConfirmationToken::getRegisterConfirmationTokenId,
        RegisterConfirmationToken::setRegisterConfirmationTokenId,
        TypeMapper.primitive(), 
        true
    );
    /**
     * This Field corresponds to the {@link RegisterConfirmationToken} field
     * that can be obtained using the {@link
     * RegisterConfirmationToken#getToken()} method.
     */
    StringField<RegisterConfirmationToken, String> TOKEN = StringField.create(
        Identifier.TOKEN,
        RegisterConfirmationToken::getToken,
        RegisterConfirmationToken::setToken,
        TypeMapper.identity(), 
        true
    );
    
    /**
     * Returns the registerConfirmationTokenId of this
     * RegisterConfirmationToken. The registerConfirmationTokenId field
     * corresponds to the database column
     * builpr.builpr.register_confirmation_token.register_confirmation_token_id.
     * 
     * @return the registerConfirmationTokenId of this RegisterConfirmationToken
     */
    int getRegisterConfirmationTokenId();
    
    /**
     * Returns the token of this RegisterConfirmationToken. The token field
     * corresponds to the database column
     * builpr.builpr.register_confirmation_token.token.
     * 
     * @return the token of this RegisterConfirmationToken
     */
    String getToken();
    
    /**
     * Sets the registerConfirmationTokenId of this RegisterConfirmationToken.
     * The registerConfirmationTokenId field corresponds to the database column
     * builpr.builpr.register_confirmation_token.register_confirmation_token_id.
     * 
     * @param registerConfirmationTokenId to set of this
     *                                    RegisterConfirmationToken
     * @return                            this RegisterConfirmationToken
     *                                    instance
     */
    RegisterConfirmationToken setRegisterConfirmationTokenId(int registerConfirmationTokenId);
    
    /**
     * Sets the token of this RegisterConfirmationToken. The token field
     * corresponds to the database column
     * builpr.builpr.register_confirmation_token.token.
     * 
     * @param token to set of this RegisterConfirmationToken
     * @return      this RegisterConfirmationToken instance
     */
    RegisterConfirmationToken setToken(String token);
    
    enum Identifier implements ColumnIdentifier<RegisterConfirmationToken> {
        
        REGISTER_CONFIRMATION_TOKEN_ID ("register_confirmation_token_id"),
        TOKEN                          ("token");
        
        private final String columnName;
        private final TableIdentifier<RegisterConfirmationToken> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "builpr";
        }
        
        @Override
        public String getSchemaName() {
            return "builpr";
        }
        
        @Override
        public String getTableName() {
            return "register_confirmation_token";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<RegisterConfirmationToken> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}