package com.builpr.database.bridge.register_confirmation_token.generated;

import com.builpr.database.bridge.register_confirmation_token.RegisterConfirmationToken;
import com.builpr.database.bridge.user.User;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.builpr.database.bridge.register_confirmation_token.RegisterConfirmationToken}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedRegisterConfirmationTokenImpl implements RegisterConfirmationToken {
    
    private int registerConfirmationTokenId;
    private int userId;
    private String token;
    
    protected GeneratedRegisterConfirmationTokenImpl() {
        
    }
    
    @Override
    public int getRegisterConfirmationTokenId() {
        return registerConfirmationTokenId;
    }
    
    @Override
    public int getUserId() {
        return userId;
    }
    
    @Override
    public String getToken() {
        return token;
    }
    
    @Override
    public RegisterConfirmationToken setRegisterConfirmationTokenId(int registerConfirmationTokenId) {
        this.registerConfirmationTokenId = registerConfirmationTokenId;
        return this;
    }
    
    @Override
    public RegisterConfirmationToken setUserId(int userId) {
        this.userId = userId;
        return this;
    }
    
    @Override
    public RegisterConfirmationToken setToken(String token) {
        this.token = token;
        return this;
    }
    
    @Override
    public User findUserId(Manager<User> foreignManager) {
        return foreignManager.stream().filter(User.USER_ID.equal(getUserId())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("registerConfirmationTokenId = " + Objects.toString(getRegisterConfirmationTokenId()));
        sj.add("userId = "                      + Objects.toString(getUserId()));
        sj.add("token = "                       + Objects.toString(getToken()));
        return "RegisterConfirmationTokenImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof RegisterConfirmationToken)) { return false; }
        final RegisterConfirmationToken thatRegisterConfirmationToken = (RegisterConfirmationToken)that;
        if (this.getRegisterConfirmationTokenId() != thatRegisterConfirmationToken.getRegisterConfirmationTokenId()) {return false; }
        if (this.getUserId() != thatRegisterConfirmationToken.getUserId()) {return false; }
        if (!Objects.equals(this.getToken(), thatRegisterConfirmationToken.getToken())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getRegisterConfirmationTokenId());
        hash = 31 * hash + Integer.hashCode(getUserId());
        hash = 31 * hash + Objects.hashCode(getToken());
        return hash;
    }
}