package com.builpr.database.bridge.message.generated;

import com.builpr.database.bridge.message.Message;
import com.builpr.database.bridge.user.User;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.builpr.database.bridge.message.Message}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMessageImpl implements Message {
    
    private int messageId;
    private int senderId;
    private int receiverId;
    private String text;
    private boolean read;
    private Timestamp sendTime;
    
    protected GeneratedMessageImpl() {
        
    }
    
    @Override
    public int getMessageId() {
        return messageId;
    }
    
    @Override
    public int getSenderId() {
        return senderId;
    }
    
    @Override
    public int getReceiverId() {
        return receiverId;
    }
    
    @Override
    public String getText() {
        return text;
    }
    
    @Override
    public boolean getRead() {
        return read;
    }
    
    @Override
    public Timestamp getSendTime() {
        return sendTime;
    }
    
    @Override
    public Message setMessageId(int messageId) {
        this.messageId = messageId;
        return this;
    }
    
    @Override
    public Message setSenderId(int senderId) {
        this.senderId = senderId;
        return this;
    }
    
    @Override
    public Message setReceiverId(int receiverId) {
        this.receiverId = receiverId;
        return this;
    }
    
    @Override
    public Message setText(String text) {
        this.text = text;
        return this;
    }
    
    @Override
    public Message setRead(boolean read) {
        this.read = read;
        return this;
    }
    
    @Override
    public Message setSendTime(Timestamp sendTime) {
        this.sendTime = sendTime;
        return this;
    }
    
    @Override
    public User findSenderId(Manager<User> foreignManager) {
        return foreignManager.stream().filter(User.USER_ID.equal(getSenderId())).findAny().orElse(null);
    }
    
    @Override
    public User findReceiverId(Manager<User> foreignManager) {
        return foreignManager.stream().filter(User.USER_ID.equal(getReceiverId())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("messageId = "  + Objects.toString(getMessageId()));
        sj.add("senderId = "   + Objects.toString(getSenderId()));
        sj.add("receiverId = " + Objects.toString(getReceiverId()));
        sj.add("text = "       + Objects.toString(getText()));
        sj.add("read = "       + Objects.toString(getRead()));
        sj.add("sendTime = "   + Objects.toString(getSendTime()));
        return "MessageImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Message)) { return false; }
        final Message thatMessage = (Message)that;
        if (this.getMessageId() != thatMessage.getMessageId()) {return false; }
        if (this.getSenderId() != thatMessage.getSenderId()) {return false; }
        if (this.getReceiverId() != thatMessage.getReceiverId()) {return false; }
        if (!Objects.equals(this.getText(), thatMessage.getText())) {return false; }
        if (this.getRead() != thatMessage.getRead()) {return false; }
        if (!Objects.equals(this.getSendTime(), thatMessage.getSendTime())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getMessageId());
        hash = 31 * hash + Integer.hashCode(getSenderId());
        hash = 31 * hash + Integer.hashCode(getReceiverId());
        hash = 31 * hash + Objects.hashCode(getText());
        hash = 31 * hash + Boolean.hashCode(getRead());
        hash = 31 * hash + Objects.hashCode(getSendTime());
        return hash;
    }
}