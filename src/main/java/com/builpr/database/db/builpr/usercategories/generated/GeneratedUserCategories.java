package com.builpr.database.db.builpr.usercategories.generated;

import com.builpr.database.db.builpr.user.User;
import com.builpr.database.db.builpr.usercategories.UserCategories;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.builpr.database.db.builpr.usercategories.UserCategories}-interface
 * representing entities of the {@code UserCategories}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedUserCategories {
    
    /**
     * This Field corresponds to the {@link UserCategories} field that can be
     * obtained using the {@link UserCategories#getUserId()} method.
     */
    final IntForeignKeyField<UserCategories, Integer, User> USER_ID = IntForeignKeyField.create(
        Identifier.USER_ID,
        UserCategories::getUserId,
        UserCategories::setUserId,
        User.USER_ID,
        TypeMapper.primitive(), 
        false
    );
    /**
     * This Field corresponds to the {@link UserCategories} field that can be
     * obtained using the {@link UserCategories#getCategory()} method.
     */
    final StringField<UserCategories, String> CATEGORY = StringField.create(
        Identifier.CATEGORY,
        UserCategories::getCategory,
        UserCategories::setCategory,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the userId of this UserCategories. The userId field corresponds
     * to the database column builpr.builpr.UserCategories.user_id.
     * 
     * @return the userId of this UserCategories
     */
    int getUserId();
    
    /**
     * Returns the category of this UserCategories. The category field
     * corresponds to the database column builpr.builpr.UserCategories.category.
     * 
     * @return the category of this UserCategories
     */
    String getCategory();
    
    /**
     * Sets the userId of this UserCategories. The userId field corresponds to
     * the database column builpr.builpr.UserCategories.user_id.
     * 
     * @param userId to set of this UserCategories
     * @return       this UserCategories instance
     */
    UserCategories setUserId(int userId);
    
    /**
     * Sets the category of this UserCategories. The category field corresponds
     * to the database column builpr.builpr.UserCategories.category.
     * 
     * @param category to set of this UserCategories
     * @return         this UserCategories instance
     */
    UserCategories setCategory(String category);
    
    /**
     * Queries the specified manager for the referenced User. If no such User
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    User findUserId(Manager<User> foreignManager);
    
    enum Identifier implements ColumnIdentifier<UserCategories> {
        
        USER_ID  ("user_id"),
        CATEGORY ("category");
        
        private final String columnName;
        private final TableIdentifier<UserCategories> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "builpr";
        }
        
        @Override
        public String getSchemaName() {
            return "builpr";
        }
        
        @Override
        public String getTableName() {
            return "UserCategories";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<UserCategories> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}