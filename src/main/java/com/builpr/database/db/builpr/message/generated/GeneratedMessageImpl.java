package com.builpr.database.db.builpr.message.generated;

import com.builpr.database.db.builpr.message.Message;
import com.builpr.database.db.builpr.user.User;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.builpr.database.db.builpr.message.Message}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMessageImpl implements Message {
    
    private int messageId;
    private int sender;
    private int receiver;
    private String content;
    private String subject;
    
    protected GeneratedMessageImpl() {
        
    }
    
    @Override
    public int getMessageId() {
        return messageId;
    }
    
    @Override
    public int getSender() {
        return sender;
    }
    
    @Override
    public int getReceiver() {
        return receiver;
    }
    
    @Override
    public String getContent() {
        return content;
    }
    
    @Override
    public String getSubject() {
        return subject;
    }
    
    @Override
    public Message setMessageId(int messageId) {
        this.messageId = messageId;
        return this;
    }
    
    @Override
    public Message setSender(int sender) {
        this.sender = sender;
        return this;
    }
    
    @Override
    public Message setReceiver(int receiver) {
        this.receiver = receiver;
        return this;
    }
    
    @Override
    public Message setContent(String content) {
        this.content = content;
        return this;
    }
    
    @Override
    public Message setSubject(String subject) {
        this.subject = subject;
        return this;
    }
    
    @Override
    public User findSender(Manager<User> foreignManager) {
        return foreignManager.stream().filter(User.USER_ID.equal(getSender())).findAny().orElse(null);
    }
    
    @Override
    public User findReceiver(Manager<User> foreignManager) {
        return foreignManager.stream().filter(User.USER_ID.equal(getReceiver())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("messageId = " + Objects.toString(getMessageId()));
        sj.add("sender = "    + Objects.toString(getSender()));
        sj.add("receiver = "  + Objects.toString(getReceiver()));
        sj.add("content = "   + Objects.toString(getContent()));
        sj.add("subject = "   + Objects.toString(getSubject()));
        return "MessageImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Message)) { return false; }
        final Message thatMessage = (Message)that;
        if (this.getMessageId() != thatMessage.getMessageId()) {return false; }
        if (this.getSender() != thatMessage.getSender()) {return false; }
        if (this.getReceiver() != thatMessage.getReceiver()) {return false; }
        if (!Objects.equals(this.getContent(), thatMessage.getContent())) {return false; }
        if (!Objects.equals(this.getSubject(), thatMessage.getSubject())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getMessageId());
        hash = 31 * hash + Integer.hashCode(getSender());
        hash = 31 * hash + Integer.hashCode(getReceiver());
        hash = 31 * hash + Objects.hashCode(getContent());
        hash = 31 * hash + Objects.hashCode(getSubject());
        return hash;
    }
}