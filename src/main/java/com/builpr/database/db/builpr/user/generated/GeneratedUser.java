package com.builpr.database.db.builpr.user.generated;

import com.builpr.database.db.builpr.user.User;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.BooleanField;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import com.speedment.runtime.typemapper.integer.PrimitiveIntegerZeroOneToBooleanMapper;
import java.sql.Date;
import java.sql.Timestamp;
import java.util.Optional;

/**
 * The generated base for the {@link
 * com.builpr.database.db.builpr.user.User}-interface representing entities of
 * the {@code User}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedUser {
    
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getUid()} method.
     */
    final IntField<User, Integer> UID = IntField.create(
        Identifier.UID,
        User::getUid,
        User::setUid,
        TypeMapper.primitive(), 
        true
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getUsername()} method.
     */
    final StringField<User, String> USERNAME = StringField.create(
        Identifier.USERNAME,
        User::getUsername,
        User::setUsername,
        TypeMapper.identity(), 
        true
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getPassword()} method.
     */
    final StringField<User, String> PASSWORD = StringField.create(
        Identifier.PASSWORD,
        User::getPassword,
        User::setPassword,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getEmail()} method.
     */
    final StringField<User, String> EMAIL = StringField.create(
        Identifier.EMAIL,
        User::getEmail,
        User::setEmail,
        TypeMapper.identity(), 
        true
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getRegtime()} method.
     */
    final ComparableField<User, Timestamp, Timestamp> REGTIME = ComparableField.create(
        Identifier.REGTIME,
        User::getRegtime,
        User::setRegtime,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getBirthday()} method.
     */
    final ComparableField<User, Date, Date> BIRTHDAY = ComparableField.create(
        Identifier.BIRTHDAY,
        User::getBirthday,
        User::setBirthday,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getFirstname()} method.
     */
    final StringField<User, String> FIRSTNAME = StringField.create(
        Identifier.FIRSTNAME,
        User::getFirstname,
        User::setFirstname,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getLastname()} method.
     */
    final StringField<User, String> LASTNAME = StringField.create(
        Identifier.LASTNAME,
        User::getLastname,
        User::setLastname,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getAvatar()} method.
     */
    final StringField<User, String> AVATAR = StringField.create(
        Identifier.AVATAR,
        o -> OptionalUtil.unwrap(o.getAvatar()),
        User::setAvatar,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getSkype()} method.
     */
    final StringField<User, String> SKYPE = StringField.create(
        Identifier.SKYPE,
        o -> OptionalUtil.unwrap(o.getSkype()),
        User::setSkype,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getTwitter()} method.
     */
    final StringField<User, String> TWITTER = StringField.create(
        Identifier.TWITTER,
        o -> OptionalUtil.unwrap(o.getTwitter()),
        User::setTwitter,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getFacebook()} method.
     */
    final StringField<User, String> FACEBOOK = StringField.create(
        Identifier.FACEBOOK,
        o -> OptionalUtil.unwrap(o.getFacebook()),
        User::setFacebook,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getInstagram()} method.
     */
    final StringField<User, String> INSTAGRAM = StringField.create(
        Identifier.INSTAGRAM,
        o -> OptionalUtil.unwrap(o.getInstagram()),
        User::setInstagram,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getDescription()} method.
     */
    final StringField<User, String> DESCRIPTION = StringField.create(
        Identifier.DESCRIPTION,
        o -> OptionalUtil.unwrap(o.getDescription()),
        User::setDescription,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getShowName()} method.
     */
    final BooleanField<User, Integer> SHOW_NAME = BooleanField.create(
        Identifier.SHOW_NAME,
        User::getShowName,
        User::setShowName,
        new PrimitiveIntegerZeroOneToBooleanMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getShowBirthday()} method.
     */
    final BooleanField<User, Integer> SHOW_BIRTHDAY = BooleanField.create(
        Identifier.SHOW_BIRTHDAY,
        User::getShowBirthday,
        User::setShowBirthday,
        new PrimitiveIntegerZeroOneToBooleanMapper(), 
        false
    );
    /**
     * This Field corresponds to the {@link User} field that can be obtained
     * using the {@link User#getShowEmail()} method.
     */
    final BooleanField<User, Integer> SHOW_EMAIL = BooleanField.create(
        Identifier.SHOW_EMAIL,
        User::getShowEmail,
        User::setShowEmail,
        new PrimitiveIntegerZeroOneToBooleanMapper(), 
        false
    );
    
    /**
     * Returns the uid of this User. The uid field corresponds to the database
     * column builpr.com.builpr.User.uid.
     * 
     * @return the uid of this User
     */
    int getUid();
    
    /**
     * Returns the username of this User. The username field corresponds to the
     * database column builpr.com.builpr.User.username.
     * 
     * @return the username of this User
     */
    String getUsername();
    
    /**
     * Returns the password of this User. The password field corresponds to the
     * database column builpr.com.builpr.User.password.
     * 
     * @return the password of this User
     */
    String getPassword();
    
    /**
     * Returns the email of this User. The email field corresponds to the
     * database column builpr.com.builpr.User.email.
     * 
     * @return the email of this User
     */
    String getEmail();
    
    /**
     * Returns the regtime of this User. The regtime field corresponds to the
     * database column builpr.com.builpr.User.regtime.
     * 
     * @return the regtime of this User
     */
    Timestamp getRegtime();
    
    /**
     * Returns the birthday of this User. The birthday field corresponds to the
     * database column builpr.com.builpr.User.birthday.
     * 
     * @return the birthday of this User
     */
    Date getBirthday();
    
    /**
     * Returns the firstname of this User. The firstname field corresponds to
     * the database column builpr.com.builpr.User.firstname.
     * 
     * @return the firstname of this User
     */
    String getFirstname();
    
    /**
     * Returns the lastname of this User. The lastname field corresponds to the
     * database column builpr.com.builpr.User.lastname.
     * 
     * @return the lastname of this User
     */
    String getLastname();
    
    /**
     * Returns the avatar of this User. The avatar field corresponds to the
     * database column builpr.com.builpr.User.avatar.
     * 
     * @return the avatar of this User
     */
    Optional<String> getAvatar();
    
    /**
     * Returns the skype of this User. The skype field corresponds to the
     * database column builpr.com.builpr.User.skype.
     * 
     * @return the skype of this User
     */
    Optional<String> getSkype();
    
    /**
     * Returns the twitter of this User. The twitter field corresponds to the
     * database column builpr.com.builpr.User.twitter.
     * 
     * @return the twitter of this User
     */
    Optional<String> getTwitter();
    
    /**
     * Returns the facebook of this User. The facebook field corresponds to the
     * database column builpr.com.builpr.User.facebook.
     * 
     * @return the facebook of this User
     */
    Optional<String> getFacebook();
    
    /**
     * Returns the instagram of this User. The instagram field corresponds to
     * the database column builpr.com.builpr.User.instagram.
     * 
     * @return the instagram of this User
     */
    Optional<String> getInstagram();
    
    /**
     * Returns the description of this User. The description field corresponds
     * to the database column builpr.com.builpr.User.description.
     * 
     * @return the description of this User
     */
    Optional<String> getDescription();
    
    /**
     * Returns the showName of this User. The showName field corresponds to the
     * database column builpr.com.builpr.User.show_name.
     * 
     * @return the showName of this User
     */
    boolean getShowName();
    
    /**
     * Returns the showBirthday of this User. The showBirthday field corresponds
     * to the database column builpr.com.builpr.User.show_birthday.
     * 
     * @return the showBirthday of this User
     */
    boolean getShowBirthday();
    
    /**
     * Returns the showEmail of this User. The showEmail field corresponds to
     * the database column builpr.com.builpr.User.show_email.
     * 
     * @return the showEmail of this User
     */
    boolean getShowEmail();
    
    /**
     * Sets the uid of this User. The uid field corresponds to the database
     * column builpr.com.builpr.User.uid.
     * 
     * @param uid to set of this User
     * @return    this User instance
     */
    User setUid(int uid);
    
    /**
     * Sets the username of this User. The username field corresponds to the
     * database column builpr.com.builpr.User.username.
     * 
     * @param username to set of this User
     * @return         this User instance
     */
    User setUsername(String username);
    
    /**
     * Sets the password of this User. The password field corresponds to the
     * database column builpr.com.builpr.User.password.
     * 
     * @param password to set of this User
     * @return         this User instance
     */
    User setPassword(String password);
    
    /**
     * Sets the email of this User. The email field corresponds to the database
     * column builpr.com.builpr.User.email.
     * 
     * @param email to set of this User
     * @return      this User instance
     */
    User setEmail(String email);
    
    /**
     * Sets the regtime of this User. The regtime field corresponds to the
     * database column builpr.com.builpr.User.regtime.
     * 
     * @param regtime to set of this User
     * @return        this User instance
     */
    User setRegtime(Timestamp regtime);
    
    /**
     * Sets the birthday of this User. The birthday field corresponds to the
     * database column builpr.com.builpr.User.birthday.
     * 
     * @param birthday to set of this User
     * @return         this User instance
     */
    User setBirthday(Date birthday);
    
    /**
     * Sets the firstname of this User. The firstname field corresponds to the
     * database column builpr.com.builpr.User.firstname.
     * 
     * @param firstname to set of this User
     * @return          this User instance
     */
    User setFirstname(String firstname);
    
    /**
     * Sets the lastname of this User. The lastname field corresponds to the
     * database column builpr.com.builpr.User.lastname.
     * 
     * @param lastname to set of this User
     * @return         this User instance
     */
    User setLastname(String lastname);
    
    /**
     * Sets the avatar of this User. The avatar field corresponds to the
     * database column builpr.com.builpr.User.avatar.
     * 
     * @param avatar to set of this User
     * @return       this User instance
     */
    User setAvatar(String avatar);
    
    /**
     * Sets the skype of this User. The skype field corresponds to the database
     * column builpr.com.builpr.User.skype.
     * 
     * @param skype to set of this User
     * @return      this User instance
     */
    User setSkype(String skype);
    
    /**
     * Sets the twitter of this User. The twitter field corresponds to the
     * database column builpr.com.builpr.User.twitter.
     * 
     * @param twitter to set of this User
     * @return        this User instance
     */
    User setTwitter(String twitter);
    
    /**
     * Sets the facebook of this User. The facebook field corresponds to the
     * database column builpr.com.builpr.User.facebook.
     * 
     * @param facebook to set of this User
     * @return         this User instance
     */
    User setFacebook(String facebook);
    
    /**
     * Sets the instagram of this User. The instagram field corresponds to the
     * database column builpr.com.builpr.User.instagram.
     * 
     * @param instagram to set of this User
     * @return          this User instance
     */
    User setInstagram(String instagram);
    
    /**
     * Sets the description of this User. The description field corresponds to
     * the database column builpr.com.builpr.User.description.
     * 
     * @param description to set of this User
     * @return            this User instance
     */
    User setDescription(String description);
    
    /**
     * Sets the showName of this User. The showName field corresponds to the
     * database column builpr.com.builpr.User.show_name.
     * 
     * @param showName to set of this User
     * @return         this User instance
     */
    User setShowName(boolean showName);
    
    /**
     * Sets the showBirthday of this User. The showBirthday field corresponds to
     * the database column builpr.com.builpr.User.show_birthday.
     * 
     * @param showBirthday to set of this User
     * @return             this User instance
     */
    User setShowBirthday(boolean showBirthday);
    
    /**
     * Sets the showEmail of this User. The showEmail field corresponds to the
     * database column builpr.com.builpr.User.show_email.
     * 
     * @param showEmail to set of this User
     * @return          this User instance
     */
    User setShowEmail(boolean showEmail);
    
    enum Identifier implements ColumnIdentifier<User> {
        
        UID           ("uid"),
        USERNAME      ("username"),
        PASSWORD      ("password"),
        EMAIL         ("email"),
        REGTIME       ("regtime"),
        BIRTHDAY      ("birthday"),
        FIRSTNAME     ("firstname"),
        LASTNAME      ("lastname"),
        AVATAR        ("avatar"),
        SKYPE         ("skype"),
        TWITTER       ("twitter"),
        FACEBOOK      ("facebook"),
        INSTAGRAM     ("instagram"),
        DESCRIPTION   ("description"),
        SHOW_NAME     ("show_name"),
        SHOW_BIRTHDAY ("show_birthday"),
        SHOW_EMAIL    ("show_email");
        
        private final String columnName;
        private final TableIdentifier<User> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "builpr.com";
        }
        
        @Override
        public String getSchemaName() {
            return "builpr";
        }
        
        @Override
        public String getTableName() {
            return "User";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<User> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}