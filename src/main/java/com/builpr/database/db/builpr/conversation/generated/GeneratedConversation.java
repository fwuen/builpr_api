package com.builpr.database.db.builpr.conversation.generated;

import com.builpr.database.db.builpr.conversation.Conversation;
import com.builpr.database.db.builpr.user.User;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.sql.Timestamp;

/**
 * The generated base for the {@link
 * com.builpr.database.db.builpr.conversation.Conversation}-interface
 * representing entities of the {@code Conversation}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedConversation {
    
    /**
     * This Field corresponds to the {@link Conversation} field that can be
     * obtained using the {@link Conversation#getConversationId()} method.
     */
    final IntField<Conversation, Integer> CONVERSATION_ID = IntField.create(
        Identifier.CONVERSATION_ID,
        Conversation::getConversationId,
        Conversation::setConversationId,
        TypeMapper.primitive(), 
        true
    );
    /**
     * This Field corresponds to the {@link Conversation} field that can be
     * obtained using the {@link Conversation#getUserId1()} method.
     */
    final IntForeignKeyField<Conversation, Integer, User> USER_ID1 = IntForeignKeyField.create(
        Identifier.USER_ID1,
        Conversation::getUserId1,
        Conversation::setUserId1,
        User.USER_ID,
        TypeMapper.primitive(), 
        false
    );
    /**
     * This Field corresponds to the {@link Conversation} field that can be
     * obtained using the {@link Conversation#getUserId2()} method.
     */
    final IntForeignKeyField<Conversation, Integer, User> USER_ID2 = IntForeignKeyField.create(
        Identifier.USER_ID2,
        Conversation::getUserId2,
        Conversation::setUserId2,
        User.USER_ID,
        TypeMapper.primitive(), 
        false
    );
    /**
     * This Field corresponds to the {@link Conversation} field that can be
     * obtained using the {@link Conversation#getCreateDate()} method.
     */
    final ComparableField<Conversation, Timestamp, Timestamp> CREATE_DATE = ComparableField.create(
        Identifier.CREATE_DATE,
        Conversation::getCreateDate,
        Conversation::setCreateDate,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Conversation} field that can be
     * obtained using the {@link Conversation#getLastMsgTime()} method.
     */
    final ComparableField<Conversation, Timestamp, Timestamp> LAST_MSG_TIME = ComparableField.create(
        Identifier.LAST_MSG_TIME,
        Conversation::getLastMsgTime,
        Conversation::setLastMsgTime,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the conversationId of this Conversation. The conversationId field
     * corresponds to the database column
     * builpr.builpr.Conversation.conversation_id.
     * 
     * @return the conversationId of this Conversation
     */
    int getConversationId();
    
    /**
     * Returns the userId1 of this Conversation. The userId1 field corresponds
     * to the database column builpr.builpr.Conversation.user_id_1.
     * 
     * @return the userId1 of this Conversation
     */
    int getUserId1();
    
    /**
     * Returns the userId2 of this Conversation. The userId2 field corresponds
     * to the database column builpr.builpr.Conversation.user_id_2.
     * 
     * @return the userId2 of this Conversation
     */
    int getUserId2();
    
    /**
     * Returns the createDate of this Conversation. The createDate field
     * corresponds to the database column
     * builpr.builpr.Conversation.create_date.
     * 
     * @return the createDate of this Conversation
     */
    Timestamp getCreateDate();
    
    /**
     * Returns the lastMsgTime of this Conversation. The lastMsgTime field
     * corresponds to the database column
     * builpr.builpr.Conversation.last_msg_time.
     * 
     * @return the lastMsgTime of this Conversation
     */
    Timestamp getLastMsgTime();
    
    /**
     * Sets the conversationId of this Conversation. The conversationId field
     * corresponds to the database column
     * builpr.builpr.Conversation.conversation_id.
     * 
     * @param conversationId to set of this Conversation
     * @return               this Conversation instance
     */
    Conversation setConversationId(int conversationId);
    
    /**
     * Sets the userId1 of this Conversation. The userId1 field corresponds to
     * the database column builpr.builpr.Conversation.user_id_1.
     * 
     * @param userId1 to set of this Conversation
     * @return        this Conversation instance
     */
    Conversation setUserId1(int userId1);
    
    /**
     * Sets the userId2 of this Conversation. The userId2 field corresponds to
     * the database column builpr.builpr.Conversation.user_id_2.
     * 
     * @param userId2 to set of this Conversation
     * @return        this Conversation instance
     */
    Conversation setUserId2(int userId2);
    
    /**
     * Sets the createDate of this Conversation. The createDate field
     * corresponds to the database column
     * builpr.builpr.Conversation.create_date.
     * 
     * @param createDate to set of this Conversation
     * @return           this Conversation instance
     */
    Conversation setCreateDate(Timestamp createDate);
    
    /**
     * Sets the lastMsgTime of this Conversation. The lastMsgTime field
     * corresponds to the database column
     * builpr.builpr.Conversation.last_msg_time.
     * 
     * @param lastMsgTime to set of this Conversation
     * @return            this Conversation instance
     */
    Conversation setLastMsgTime(Timestamp lastMsgTime);
    
    /**
     * Queries the specified manager for the referenced User. If no such User
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    User findUserId1(Manager<User> foreignManager);
    
    /**
     * Queries the specified manager for the referenced User. If no such User
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    User findUserId2(Manager<User> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Conversation> {
        
        CONVERSATION_ID ("conversation_id"),
        USER_ID1        ("user_id_1"),
        USER_ID2        ("user_id_2"),
        CREATE_DATE     ("create_date"),
        LAST_MSG_TIME   ("last_msg_time");
        
        private final String columnName;
        private final TableIdentifier<Conversation> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "builpr";
        }
        
        @Override
        public String getSchemaName() {
            return "builpr";
        }
        
        @Override
        public String getTableName() {
            return "Conversation";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<Conversation> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}